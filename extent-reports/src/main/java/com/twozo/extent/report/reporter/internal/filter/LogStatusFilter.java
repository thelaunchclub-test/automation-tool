package com.twozo.extent.report.reporter.internal.filter;

import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.aventstack.extentreports.reporter.configuration.EntityFilters;
import com.aventstack.extentreports.reporter.configuration.StatusFilter;

import com.twozo.extent.report.reporter.internal.extent.AbstractExtentReporter;
import com.twozo.extent.report.reporter.internal.spark.SparkReporter;

import com.twozo.extent.report.reporter.service.ReportService;
import com.twozo.extent.report.test.model.LogStatus;

import lombok.Getter;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

/**
 * <p>
 * Filters log entries for a {@link SparkReporter} based on their status.
 * Allows to specify a set of {@link LogStatus} (e.g., FAIL, PASS, SKIP)
 * and ensures that only logs matching these statuses are included in the report generated by
 * the {@link SparkReporter}.
 * </p>
 *
 * <p>
 * Key Features:
 * <ul>
 *     <li>Filter logs based on specified statuses.</li>
 *     <li>Integrates with {@link SparkReporter} for generating customized reports.</li>
 * </ul>
 * </p>
 *
 * @author Navin Jones
 * @version 1.0
 * @see AbstractExtentReporter
 */
@Getter
public final class LogStatusFilter<T extends AbstractExtentReporter> {

    private final T reporter;
    private Set<LogStatus> statuses;
    private ExtentSparkReporter extentReporter;
    private EntityFilters<ExtentSparkReporter> entityFilters;
    private StatusFilter<ExtentSparkReporter> statusFilter;

    public LogStatusFilter(final T reporter) {
        this.reporter = reporter;

        if (reporter instanceof final SparkReporter sparkReporter) {
            this.extentReporter = sparkReporter.getExtentSparkReporter();
            this.entityFilters = extentReporter.filter();
            this.statusFilter = entityFilters.statusFilter();
        }
    }

    /**
     * <p>
     * Applies a filter to include only logs with the specified statuses.
     * </p>
     *
     * @param status Represents the {@link Collection} of {@link LogStatus} values used to filter logs.
     * @return {@link LogStatusFilter}
     */
    public LogStatusFilter<T> as(final Collection<LogStatus> status) {
        this.statuses = new HashSet<>(status);

        statusFilter.as(LogStatus.getStatus(status));

        return this;
    }

    /**
     * <p>
     * Applies a filter to include only logs with the specified statuses.
     * </p>
     *
     * @param statuses The {@link LogStatus} values to maintain order based on filter criteria.
     * @return {@link LogStatusFilter}.
     */
    public LogStatusFilter<T> as(final LogStatus... statuses) {
        return as(Set.of(statuses));
    }

    /**
     * <p>
     * Gets the {@link ReportService} .
     * </p>
     *
     * @return {@link ReportService}
     */
    public T getStatusReporter() {
        return reporter;
    }
}