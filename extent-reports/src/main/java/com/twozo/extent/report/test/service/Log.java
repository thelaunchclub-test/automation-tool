package com.twozo.extent.report.test.service;

import com.twozo.extent.report.test.model.LogStatus;

/**
 * Represents a log entry for a {@link ReportTest}.
 *
 * <p>
 * Designed to manage the details of test execution logs.Provides access to the status of the test, the message
 * logged during the test, and the name of the test itself.
 * </p>
 *
 * <p>
 * Example usage:
 * <pre>{@code
 * log.setLog(Status.PASSED, "Test completed successfully.");
 * }</pre>
 * </p>
 *
 * @author Navin Jones
 * @version 1.0
 */
public interface Log {

    /**
     * <p>
     * Logs the specified status and message to the {@link Log}.
     * </p>
     *
     * @param logStatus  - the {@link LogStatus}.
     * @param logMessage - the message to be logged.
     */
    void setLog(final LogStatus logStatus, final String logMessage);

    /**
     * <p>
     * Logs the specified message to the {@link Log} as info.
     * </p>
     *
     * @param message The message to be logged.
     * @return The {@see Log}.
     */
    Log info(final String message);

    /**
     * <p>
     * Logs the information generated by {@link Formatter} as info.
     * </p>
     *
     * @param formatter The {@link Formatter}.
     * @return The {@see Log}.
     */
    Log info(final Formatter formatter);

    /**
     * <p>
     * Logs a pass status along with specified pass message to the {@link Log}.
     * </p>
     *
     * @param message The pass message to be logged.
     * @return The {@see Log}.
     */
    Log pass(final String message);

    /**
     * <p>
     * Logs a pass status along with information generated by {@link Formatter}.
     * </p>
     *
     * @param formatter The {@link Formatter}.
     * @return The {@see Log}.
     */
    Log pass(final Formatter formatter);

    /**
     * <p>
     * Logs a fail status along with specified fail message to the {@link Log}.
     * </p>
     *
     * @param message The fail message to be logged.
     * @return The {@see Log}.
     */
    Log fail(final String message);

    /**
     * <p>
     * Logs a fail status along with information generated by {@link Formatter}.
     * </p>
     *
     * @param formatter The {@link Formatter}.
     * @return The {@see Log}.
     */
    Log fail(final Formatter formatter);

    /**
     * <p>
     * Logs a test status as failure with the provided exception.
     * </p>
     *
     * @param exception The exception that caused the test failure.
     */
    void fail(final Exception exception);

    /**
     * <p>
     * Logs a skip status along with specified skip message to the {@link Log}.
     * </p>
     *
     * @param message The skip message to be logged.
     * @return The {@see Log}.
     */
    Log skip(final String message);

    /**
     * <p>
     * Logs a skip status along with information generated by {@link Formatter}.
     * </p>
     *
     * @param formatter The {@link Formatter}.
     * @return The {@see Log}.
     */
    Log skip(final Formatter formatter);

    /**
     * <p>
     * Logs a warn status along with specified warning message to the {@link Log}.
     * </p>
     *
     * @param message The warn message to be logged.
     * @return The {@see Log}.
     */
    Log warn(final String message);

    /**
     * <p>
     * Logs a warn status along with information generated by {@link Formatter}.
     * </p>
     *
     * @param formatter The {@link Formatter}.
     * @return The {@see Log}.
     */
    Log warn(final Formatter formatter);
}